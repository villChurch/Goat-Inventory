@page "/Goats/all"
@using GoatInventory.Models
@using Microsoft.EntityFrameworkCore
@inject GoatInventoryContext db
@inject NavigationManager _nav
@inject IJSRuntime JsRuntime

<MudGrid>
    <MudSwitch @bind-Checked="_showDeadGoats" Color="Color.Primary">Show Dead Goats</MudSwitch>
    <MudSwitch @bind-Checked="_showSoldGoats" Color="Color.Primary">Show Sold Goats</MudSwitch>
    <MudSwitch @bind-Checked="_newTab" Color="Color.Primary">Open pages in new Tab</MudSwitch>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Callback">Filter</MudButton>
</MudGrid>
<MudSpacer/>
<br/>
<MudTable @ref="_table" Items="@_goats" Filter="new Func<Goat,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" OnRowClick="RowClickEvent" T="Goat">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Goats</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.FullName)">Full Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.BarnName)">Herd Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x =>x.BreedType)">Breed</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x =>x.Sex)">Sex</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.DateOfBirth)">Date of Birth</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.Alive)">Alive</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FullName">@context.FullName</MudTd>
        <MudTd DataLabel="BarnName">@context.BarnName</MudTd>
        <MudTd DataLabel="BreedType">@context.BreedType</MudTd>
        <MudTd DataLabel="Sex">@context.Sex</MudTd>
        <MudTd DataLabel="DateOfBirth">@context.DateOfBirth</MudTd>
        <MudTd DataLabel="Alive">@context.Alive</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager @ref="_pager" PageSizeOptions="@(new int[]{_goats.Count(), 10, 50, 100})" />
    </PagerContent>
</MudTable>

@code {

    IEnumerable<Goat> _goats;

    private Goat selectedItem1 = null;
    private string searchString1 = "";
    private bool _showDeadGoats = false;
    private bool _showSoldGoats = false;
    private bool _newTab = false;
    MudTable<Goat> _table;
    MudTablePager _pager;

    protected override async Task OnInitializedAsync()
    {
        _goats = await LoadGoats();
    }
    
    private bool FilterFunc1(Goat element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Goat element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BarnName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.BreedType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void RowClickEvent(TableRowClickEventArgs<Goat> tableRowClickEventArgs)
    {
        if (_newTab)
        {
            JsRuntime.InvokeAsync<object>("open", $"/Goat/show/{tableRowClickEventArgs.Item.Id}", "_blank");
        }
        else
        {
            _nav.NavigateTo($"/Goat/show/{tableRowClickEventArgs.Item.Id}");   
        }
    }

    private async Task<List<Goat>> LoadGoats()
    {
        return await db.Goats.Where(x => x.Alive == true && x.Sold == false).OrderBy(x => x.DateOfBirth).ToListAsync();
    }
    private async void Callback(MouseEventArgs obj)
    {
        var list = await LoadGoats();
        if (_showSoldGoats)
        {
            var soldGoats = await db.Goats.Where(x => x.Sold == true).ToListAsync();
            list.AddRange(soldGoats);
        }

        if (_showDeadGoats)
        {
            var deadGoats = await db.Goats.Where(x => x.Alive == false).ToListAsync();
            list.AddRange(deadGoats);
        }

        _goats = list;
        _table.SetRowsPerPage(list.Count);
        StateHasChanged();
    }

}