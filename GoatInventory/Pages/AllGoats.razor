@page "/Goats/all"
@using GoatInventory.Models
@using Microsoft.EntityFrameworkCore
@inject GoatInventoryContext db
@inject NavigationManager _nav

<MudTable Items="@_goats" Filter="new Func<Goat,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" OnRowClick="RowClickEvent" T="Goat">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Goats</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.FullName)">Full Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.BarnName)">Herd Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x =>x.BreedType)">Breed</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x =>x.Sex)">Sex</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.DateOfBirth)">Date of Birth</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Goat, object?>(x => x.Alive)">Alive</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FullName">@context.FullName</MudTd>
        <MudTd DataLabel="BarnName">@context.BarnName</MudTd>
        <MudTd DataLabel="BreedType">@context.BreedType</MudTd>
        <MudTd DataLabel="Sex">@context.Sex</MudTd>
        <MudTd DataLabel="DateOfBirth">@context.DateOfBirth</MudTd>
        <MudTd DataLabel="Alive">@context.Alive</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@(new int[]{_goats.Count(), 10, 50, 100})" />
    </PagerContent>
</MudTable>

@code {

    IEnumerable<Goat> _goats;

    private Goat selectedItem1 = null;
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        _goats = await db.Goats.OrderBy(x => x.DateOfBirth).ToListAsync();
    }
    
    private bool FilterFunc1(Goat element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Goat element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BarnName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.BreedType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private void RowClickEvent(TableRowClickEventArgs<Goat> tableRowClickEventArgs)
    {
        _nav.NavigateTo($"/Goat/show/{tableRowClickEventArgs.Item.Id}");
    }
}