@page "/Healthevent/add/{goatId:long}"
@using GoatInventory.Models
@using Microsoft.EntityFrameworkCore
@inject GoatInventoryContext _db
@inject ISnackbar _Snackbar

@if (_goat is null && _loading)
{
    <MudSkeleton Animation="Animation.Wave" />
}
else if (!_loading)
{
    <MudStack>
        <MudCard>
            <MudCardContent>
                <MudItem>
                    <MudStack>
                        <MudForm @ref="_form">
                            <MudTextField @ref="_event" T="string" Label="Event" AutoGrow Required="true" RequiredError="Must have a health event"/>
                            <MudDatePicker @ref="_eventDate" Label="Event Date" Date="DateTime.Now"/>
                        </MudForm>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@AddEvent">Save Event</MudButton>
                    </MudStack>
                </MudItem>
            </MudCardContent>
        </MudCard>
        <MudSpacer/>
        <MudPaper>
            <MudStack>
                <MudGrid>
                    <MudItem xs="10">
                        <MudText Typo="Typo.h4" Align="Align.Center">Health Events for @(_goat.BarnName ?? "Goat")</MudText>
                    </MudItem>
                </MudGrid>
                <MudSpacer/>
                <MudTable Items="_healthEvents" Hover="true">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<HealthEvent, object?>(x => x.EventText)">Event</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<HealthEvent, object?>(x => x.EventDate)">Date</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Event">@context.EventText</MudTd>
                        <MudTd DataLabel="Date">@context.EventDate</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>
            </MudStack>
        </MudPaper>
    </MudStack>
}
else
{
    <MudText Typo="Typo.h2">No goat found by this id</MudText>
}

@code {
    [Parameter]
    public long goatId { get; set; }
    
    List<HealthEvent> _healthEvents;
    MudDatePicker _eventDate;
    MudTextField<string> _event;
    Goat? _goat;
    MudForm _form;
    bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _goat = await _db.Goats.Where(x => x.Id == goatId).FirstOrDefaultAsync();
        _healthEvents = await _db.HealthEvents.Where(x => x.GoatId == goatId).ToListAsync();
        _loading = false;
    }

    private async void AddEvent()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            var _healthEvent = new HealthEvent
            {
                EventText = _event.Value,
                EventDate = _eventDate.Date.Value.ToUniversalTime(),
                GoatId = _goat.Id
            };
            
            await _db.HealthEvents.AddAsync(_healthEvent);
            await _db.SaveChangesAsync();
            _form.Reset();
            _healthEvents = await _db.HealthEvents.Where(x => x.GoatId == goatId).ToListAsync();
            StateHasChanged();
            _Snackbar.Add($"Health event saved for {_goat.BarnName}", Severity.Success);
        }
        else
        {
            _Snackbar.Add("Form is not valid.", Severity.Error);
        }
    }

}