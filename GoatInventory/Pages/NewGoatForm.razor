@page "/Goat/new"
@using GoatInventory.Models
@using GoatInventory.Pages.Dialogs
@inject GoatInventoryContext Db
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudGrid>
            <MudItem xs="6">
                <MudPaper Class="pa-4 mt-4">
                    <MudForm @ref="_form" @bind-IsValid="@_success">
                        <MudTextField @ref="_fullName" T="string" Label="Full Name" Required="true" RequiredError="Full name is required!"/>
                        <MudTextField @ref="_herdName" T="string" Label="Herd Name" Required="true" RequiredError="Herd name is required!"/>
                        <MudTextField @ref="_sex" T="string" Label="Sex" Required="true"/>
                        <MudTextField @ref="_dateOfBirthString" T="string" Label="Date Of Birth" Placeholder="mm/dd/yyyy" Required="true"/>
                        @* <MudDatePicker @ref="_dateOfBirth" Label="Date Of Birth" Editable="true" @bind-Date="_date" Placeholder="Select Date" Required="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy"/> *@
                        <MudTextField @ref="_breed" T="string" Label="Breed" Required="true" RequiredError="Goat must have a breed"/>
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                            <ButtonTemplate>
                                <MudFab HtmlTag="label"
                                        Color="Color.Secondary"
                                        Icon="@Icons.Material.Filled.Image"
                                        Label="Load picture"
                                        for="@context.Id"/>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Class="pa-4 mt-4">
                    <MudForm @ref="_pedForm">
                        <MudTextField @ref="_dam" T="string" Label="Dam" Required="true"/>
                        <MudTextField @ref="_sire" T="string" Label="Sire" Required="true"/>
                        <MudTextField @ref="_dd" T="string" Label="Dam's Dam" Required="true"/>
                        <MudTextField @ref="_ds" T="string" Label="Dam's Sire" Required="true"/>
                        <MudTextField @ref="_sd" T="string" Label="Sire's Dam" Required="true"/>
                        <MudTextField @ref="_ss" T="string" Label="Sire's Sire" Required="true"/>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@AddNewGoat">Add Goat</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>_form.Reset())" Class="mx-2">Reset</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool _success;
    MudForm _form;
    DateTime? _date;
    MudTextField<string> _fullName;
    MudTextField<string> _herdName;
    MudTextField<string> _sex;
    MudTextField<string> _breed;
    MudTextField<string> _dateOfBirthString;
    MudDatePicker _dateOfBirth;
    Goat _newGoat;
    IBrowserFile? _imageFile;

    MudForm _pedForm;
    MudTextField<string> _sire;
    MudTextField<string> _dam;
    MudTextField<string> _dd;
    MudTextField<string> _ds;
    MudTextField<string> _sd;
    MudTextField<string> _ss;
    DateTime _dob;


    private bool CheckDate()
    {
        return _dateOfBirthString.Value.Length > 0 && DateTime.TryParse(_dateOfBirthString.Value, out _dob);
    }
    private async void AddNewGoat()
    {
        await _form.Validate();
        await _pedForm.Validate();
        if (!CheckDate())
        {
            Snackbar.Add("Date is not valid.", Severity.Error);
        }
        else if (_form.IsValid && _pedForm.IsValid)
        {
            await SaveFile();
            _newGoat = new Goat
            {
                FullName = _fullName.Value,
                BarnName = _herdName.Value,
                Sex = _sex.Value,
                BreedType = _breed.Value,
                DateOfBirth = _dob.ToUniversalTime(),
                ImageLink = _imageFile is null ? "https://wallpapercave.com/wp/wp5081965.jpg" : $"images/{_imageFile.Name}"
            };
            var res = await Db.Goats.AddAsync(_newGoat);
            await Db.SaveChangesAsync();
            var pedigree = new Pedigree
            {
                Sire = _sire.Value,
                Dam = _dam.Value,
                Ss = _ss.Value,
                Sd = _sd.Value,
                Ds = _ds.Value,
                Dd = _dd.Value,
                GoatId = res.Entity.Id
            };
            await Db.Pedigrees.AddAsync(pedigree);
            Snackbar.Add($"Goat {_fullName.Value} has been added", Severity.Success);
            await _form.ResetAsync();
            await Db.SaveChangesAsync();
        }
        else
        {
            Snackbar.Add("Form is not valid. Please see errors on form.", Severity.Error);
        }
    }
    
    private void UploadFiles(IBrowserFile uploadFile)
    {
        //save for later
        _imageFile = uploadFile;
    }

    private async Task SaveFile()
    {
        if (_imageFile is null) return;
        if (_imageFile.Size > 5120000L)
        {
            _imageFile = null;
            OpenDialog(new DialogOptions() { DisableBackdropClick = true });
        }
        else
        {
            await using FileStream fs = new($"wwwroot/images/{_imageFile.Name}", FileMode.Create);
            await _imageFile.OpenReadStream(5120000L).CopyToAsync(fs);
        }
    }
    
    private void OpenDialog(DialogOptions options)
    {
        Dialog.Show<FileSizeDialog>("File too big", options);
    }
}